#Clay Kynor and Glen Passow
#11.14.18
#Calculus

from math import sin,cos, tan, acos, asin, atan
from math import exp, expm1, e, pi
from math import log, log10, sqrt, log2
from math import ceil, floor

#Get the required values and function from the user
a = float(input("Input the left bound of your interval "))
b = float(input("Input the right bound of your interval "))
s = float(input("Input the step (smaller than 0.1) at which values will be calculated "))
func = input("Input a function which is continuous and differentialble on the given interval (see the users manual) ")

for i in range(0,20):
    print("")

print('Range is [',a,',',b,']')
print('Step is ',s)
print('Function is ',func)

#this value is the offset used in the numerical derivative calculation.
dif = 0.00001

#defines what "zero" counts as for the program when identifying endpnts etc.
zero = (s**20)

#defines lists for the critical points and inflection points that will be used for identifying increasing/decreasing and concavity intervals
critPnts = []
inflectionPnts = []

#Defines what the uncertainty is for the x values that are produced in
unc = s/2

#This makes a weird issue as the last value will go beyond the end of the interval if the values do not come out right on
n = int((b-a)//s) + 1

#make list of the x vlaues within the range on the given step
xvals=[]

#fill x list
for i in range(0,n):
    #simply step along the range and add values to the list
	xvals.append(a + i*s)

#make list of the y vlaues within the range on the given step
yvals=[]

#fill y list
for i in range(0,n):
	x = a + i*s
	#put every x value into the function to get the y values and add them
	yvals.append(eval(func))
 
#make list of the f' vlaues within the range on the given step
f1 = []

#fill f' list
for i in range(0,n):
    #define x as a value a little to the right of x
	x = a + i*s + dif
	#find the corresponding y value to the shifted x value
	f1y1 = eval(func)
	#define x again, but this time a little to the left of x
	x = a + i*s - dif
	#find the y value corresponding to the left shifted x value
	f1y2 = eval(func)
    
    #calculate the derivative at x (this is the point right between the two shifted values)
	f1Val = (f1y1-f1y2)/(2*dif)
	f1.append(f1Val)

#make list of the f'' vlaues within the range on the given step
f2 = []

#fill f'' list
for i in range (0,n):
    #x value shifted a tiny bit to the right
	x = a + i*s + dif
	#corresponding value
	f2y1 = eval(func)
    
    #x value shifted a tiny bit to the left
	x = a + i*s - dif
	#corresponding y value
	f2y2 = eval(func)
    
    #define x as "itself" again
	x = a + i*s
	f2y3 = eval(func)
    
	#The equation to get the secnd derivative is then shown below. This can be found by putting the derivative equation into itself and simplifying. There are then effectively three points that are being used to find this value
	f2Val = (f2y1 - 2*f2y3 +f2y2)/(dif**2)
	f2.append(f2Val)

#simply take away the # at the start of one of these print statements to get a list of the values for x, y, f', and f''
#print('X values', xvals)
#print('Y values', yvals)
#print("F' values", f1)
#print("F'' values", f2)

#rounding function
def float_round(num, places = 0, direction = ceil):
	return direction(num * (10**places)) / float(10**places)
    
#add this first x value for listing purposes
inflectionPnts.append(float_round((xvals[-1])))

#identify if the left endpoint is a maximum or minimum
if abs(f1[0]) == f1[0]:
	print('Local minumum at the endpoint (', float_round(xvals[0], 2, round), ',', float_round(yvals[0], 2, round), ')')
	#the state is used to decide if the first increasing or decreasing interval will be increasing or decreasing.
	state = True
else:
	print('Local maximum at the endpoint (', float_round(xvals[0], 2, round), ',', float_round(yvals[0], 2, round), ')')
	#the state is used to decide if the first increasing or decreasing interval will be increasing or decreasing.
	state = False
    
#add the endpoint to the critical point list. Even though it is not a critical point this is done for finding intervals
critPnts.append(float_round(xvals[0], 2, round))

#Think about it. If your values go +, +, +, -, -, - There are two places that there will be a sign change looking to the sides...We need the x value between the two
#Find the internal critical points
#A lot of the the logical arguments are to deal with the fact that no number is actually zero.
#by setting the range like this the end points are not included.
for i in range(1,n-2):
    #If the value "ahead" and "behind" are not zero and at the change.
    if abs((f1[i-1]) * (f1[i+1])) > zero:
        #The value ahead and behind must have a product less than zero.
        if (f1[i-1]) * (f1[i+1]) < 0:
            #This states that the sign change must happen between the current value and the next one.This stops "double counting"
            if f1[i]*f1[i+1] < 0:
                #label the point
            	pnt = float_round(((xvals[i] + xvals[i+1])/2), 2, round)
            	critPnts.append(pnt)
            	if abs(f2[i]) == f2[i]:
                	print('Local minimum at x = ',pnt, '+/-',unc)
            	else:
                	print('Local maximum at x = ', pnt, '+/-',unc)

#Find out if the right end point is maximum or a minimum
if abs(f1[-1]) == f1[-1]:
	print('Local maximum at the endpoint (', float_round(xvals[-1], 2, round), ',', float_round(yvals[-1], 2, round), ')')
else:
	print('Local minimum at the endpoint (', float_round(xvals[-1], 2, round), ',', float_round(yvals[-1], 2, round), ')')
#add to crit pnt lsit
critPnts.append(float_round(xvals[-1], 2, round))
print("")
               	 
#Find the inflection points
#for an explanation of the logic see the comments from line 118 to 135. This is the same, but with the second derivative.
inflection = False
for i in range(1,n-2):
    if abs((f2[i-1]) * (f2[i+1])) > zero:
        if (f2[i-1]) * (f2[i+1]) < 0:
            if f2[i]*f2[i+1] < 0:
            	pnt = float_round(((xvals[i] + xvals[i+1])/2), 5, round)
            	inflectionPnts.append(pnt)
            	print('Inflection point at (', pnt, '+/-',unc,')')
            	inflection = True
if inflection == False:
    print("There are no inflection points on the interval")
print("")

#increasing/decreasing
#The state variable is defined above to determine if the first interval is increasing or decreasing. The intervals then go between increasing and decreasing.
#count the critical points and subtract one to get the number of intervals of increasing and decreasing
reps = len(critPnts) - 1
for i in range (0, reps):
    if state == True:
        print('increasing on interval [',critPnts[i],', ',critPnts[i+1],']')
    	state = False
    else:
        print('decreasing on interval [',critPnts[i],', ',critPnts[i+1],']')
        state = True
print("")

#concave up/concave down
#count the inflection points (and the end points) then subtract one. This yields the number of concavity intervals that will exist
reps = len(inflectionPnts) - 1

#Add the last x value for marking purposes
inflectionPnts.append(float_round((xvals[-1])))

#Determine if the first interval will be concave up or down by looking at the second point. This is probably the weakedst point in the code as it relies on there not being a point of inflection on the second point.
if f2[1] > 0:
	state = True
else:
    state = False

#Determine if the given function is a line with no concavity
line = True
for i in f2:
    if abs(f2[i]) > zero:
        line = False
    
#if there is concavity define each interval between the end points and inflection points.
#If only one interval for concavity. This is important to get the brackets correct
if line == False:
    if reps == 0:
        if state == True:
            print('concave up on interval [',inflectionPnts[-2],', ',inflectionPnts[-1],']')
        else:
            print('concave down on interval [',inflectionPnts[-2],', ',inflectionPnts[-1],']')
        
    #make the first concave interval. The difference with this one is that the first bracket is closed "["
    if reps != 0:
        if state == True:
            print('concave up on interval [',inflectionPnts[0],', ',inflectionPnts[1],')')
            state = False
        else:
            print('concave down on interval [',inflectionPnts[0],', ',inflectionPnts[1],')')
            state = True
            
    #make all of the inner convavity intervals. All brackets are open
    for i in range (0, reps-1):
        if state == True:
            print('concave up on interval (',inflectionPnts[i+1],', ',inflectionPnts[i+2],')')
            state = False
        else:
            print('concave down on interval (',inflectionPnts[i+1],', ',inflectionPnts[i+2],')')
            state = True
           	 
    #make exterior concavity at the end of the interval. Ends with closed bracket.
    if reps != 0:
        if state == True:
            print('concave up on interval (',inflectionPnts[-2],', ',inflectionPnts[-1],']')
        else:
            print('concave down on interval (',inflectionPnts[-2],', ',inflectionPnts[-1],']')
else:
    print("There is no concavity on the interval")
print("")
    
#Find global max and min
#list for y values of crit points
critExtremes = []

#fill a list with the y values corresponding to the critical points and end points
reps = len(critPnts)
for i in range(0,reps):
    #get the x value for a critical point
    x = critPnts[i]
    #The rounding is important to make sure that all of the maximums for sin or cos are all counted
    #plug this x value back into the orginal function to get the y value
    y = float_round((eval(func)), 2, round)
    #add the y value to the extrema list of y values.
    critExtremes.append(y)

#find the max and min values of the y values for critical points and end points
maxy = max(critExtremes)
miny = min(critExtremes)

#Go through the list of the y values and see if they mmatch the max or min values. If they do then print the corresponding x value.
for i in range(0,reps):
    if critExtremes[i] == maxy:
        print('Global maximum at (',critPnts[i],',',critExtremes[i],')')
    if critExtremes[i] == miny:
        print('Global minimum at (',critPnts[i],',',critExtremes[i],')')
    